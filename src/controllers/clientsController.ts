/**
 * Customers Registration APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class ClientsController extends BaseController {
  /**
   * This Endpoint is used for Creating a new user.
   *
   * @param body
   * @return Response from the API call
   */
  async insertCustomer(
    body?: unknown,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/clients');
    const mapped = req.prepareArgs({ body: [body, optional(unknown())] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ApiError, 'Bad Request');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * This Endpoint is used to search for all clients.
   *
   * @return Response from the API call
   */
  async queryAllCustomers(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/clients');
    req.throwOn(400, ApiError, 'Bad Request');
    req.throwOn(404, ApiError, 'Not Found');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * This Endpoint is used to search for a client.
   *
   * @param clientId
   * @return Response from the API call
   */
  async querryCustomerById(
    clientId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ clientId: [clientId, string()] });
    req.appendTemplatePath`/clients/${mapped.clientId}`;
    req.throwOn(400, ApiError, 'Bad Request');
    req.throwOn(404, ApiError, 'Not Found');
    return req.callAsJson(unknown(), requestOptions);
  }
}
